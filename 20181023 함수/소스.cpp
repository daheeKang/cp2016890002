#include <stdio.h>

//==============================20181023 함수==================================
	////////////////쪽지시험볼 때 더 빠르게 써야함/////////////////
	///////////////걷어가기 전에 빨리쓰기 연습ㅠㅠ//////////////////
	// 요약화(추상화) "abstraction"  (수라는 개념도 추상화된 것) 
	// 추상화에는 2가지 핵심단어가 있음	1) 목적 2) 요약 / 목적에의해서 필요없는거 버리고 필요한거만 챙김 ~~ 
	// 1. 절차적 요약화 2. 선언적 요약화(구조체)     ==> 함수
	// mmlab 내용 확인
	// 모르는거있으면 유튜브에 다있음 ~ 	
//=============================================================================
int gVar = 100; // 아무 이유없이 전체에 100을 더함. 전역변수(global variable) 프밍할때는 절대 쓰지말것 !!!!!!!! 그냥 이런게 있다 ~ 
	// 함수 sum()
	//입력 : 두 정수
	//출력 : 두 정수의 합
	//부수효과 : 없음
	
//int sum(int x, int q) { //// 함수선언  1.sum은 함수이름(sum)  2.매개변수의 갯수(2개)  3.각 매개변수의 자료형(int, int)  4.반환값의 자료형(반환형)(int)  <= 1~4전부 함수 호출하기 위해 필요한 정보들
//	 int c;			// 윗줄 { 부터 함수 본체 }		 //////여기가 9번
//	 c= x+q+gVar;									//10번
//	 return c;
//	 }
/////////위에 5줄이 함수정의
//// 식별자 유효한것 : 함수의 유효범위
//	 int main(){
//		 int x = 10, y =20, z; // 여기의 x와 위의 x는 다름 //// 상태도 노트 참조    여기가 16번
//		 z = sum(x,y); // <- 함수호출						여기가 17번
//		 printf("z=%d\n",z);
//
//		 // 상태도 노트 참고


//int sum(int a, int b) { 
//	  static int c; // 앞에 static을 붙이면 c자리가 소멸하지 않음				
//	 c= a+b; a=100;					//상태도 아래에 a에 100이 들어감. a가 100이 반환되는게 아님			
//	 return c;
//	 }
//// 위 함수 안에서는 xyz에 접근 못함
//	 int main(){
//		 int x = 10, y =20, z; 
//		 z = sum(x,y); 
//		 printf("z=%d, x=%d\n",z,x);
//		 return 0;
//	 }
	 // 디버그 - 프로그램을 한줄 한줄 단위로 수행




//함수 : goodPrint()
//입력 : 없음
//출력 : 없음
//부수효과 : 화면에 good 출력
void goodPrint(){
	printf("good\n");
}

int sum(int a, int b) { 
	  static int c; 		
	 c= a+b; a=100;								
	 return c;
	 }


int main(){
		 int x = 10, y =20, z; 
		 z = sum(x,y); 
		 printf("z=%d, x=%d\n",z,x);
		goodPrint();
	 }
